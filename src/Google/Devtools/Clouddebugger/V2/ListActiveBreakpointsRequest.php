<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/clouddebugger/v2/controller.proto

namespace Google\Devtools\Clouddebugger\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Request to list active breakpoints.
 * </pre>
 *
 * Protobuf type <code>google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest</code>
 */
class ListActiveBreakpointsRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Identifies the debuggee.
     * </pre>
     *
     * <code>string debuggee_id = 1;</code>
     */
    private $debuggee_id = '';
    /**
     * <pre>
     * A wait token that, if specified, blocks the method call until the list
     * of active breakpoints has changed, or a server selected timeout has
     * expired.  The value should be set from the last returned response.
     * </pre>
     *
     * <code>string wait_token = 2;</code>
     */
    private $wait_token = '';
    /**
     * <pre>
     * If set to `true`, returns `google.rpc.Code.OK` status and sets the
     * `wait_expired` response field to `true` when the server-selected timeout
     * has expired (recommended).
     * If set to `false`, returns `google.rpc.Code.ABORTED` status when the
     * server-selected timeout has expired (deprecated).
     * </pre>
     *
     * <code>bool success_on_timeout = 3;</code>
     */
    private $success_on_timeout = false;

    public function __construct() {
        \GPBMetadata\Google\Devtools\Clouddebugger\V2\Controller::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Identifies the debuggee.
     * </pre>
     *
     * <code>string debuggee_id = 1;</code>
     */
    public function getDebuggeeId()
    {
        return $this->debuggee_id;
    }

    /**
     * <pre>
     * Identifies the debuggee.
     * </pre>
     *
     * <code>string debuggee_id = 1;</code>
     */
    public function setDebuggeeId($var)
    {
        GPBUtil::checkString($var, True);
        $this->debuggee_id = $var;
    }

    /**
     * <pre>
     * A wait token that, if specified, blocks the method call until the list
     * of active breakpoints has changed, or a server selected timeout has
     * expired.  The value should be set from the last returned response.
     * </pre>
     *
     * <code>string wait_token = 2;</code>
     */
    public function getWaitToken()
    {
        return $this->wait_token;
    }

    /**
     * <pre>
     * A wait token that, if specified, blocks the method call until the list
     * of active breakpoints has changed, or a server selected timeout has
     * expired.  The value should be set from the last returned response.
     * </pre>
     *
     * <code>string wait_token = 2;</code>
     */
    public function setWaitToken($var)
    {
        GPBUtil::checkString($var, True);
        $this->wait_token = $var;
    }

    /**
     * <pre>
     * If set to `true`, returns `google.rpc.Code.OK` status and sets the
     * `wait_expired` response field to `true` when the server-selected timeout
     * has expired (recommended).
     * If set to `false`, returns `google.rpc.Code.ABORTED` status when the
     * server-selected timeout has expired (deprecated).
     * </pre>
     *
     * <code>bool success_on_timeout = 3;</code>
     */
    public function getSuccessOnTimeout()
    {
        return $this->success_on_timeout;
    }

    /**
     * <pre>
     * If set to `true`, returns `google.rpc.Code.OK` status and sets the
     * `wait_expired` response field to `true` when the server-selected timeout
     * has expired (recommended).
     * If set to `false`, returns `google.rpc.Code.ABORTED` status when the
     * server-selected timeout has expired (deprecated).
     * </pre>
     *
     * <code>bool success_on_timeout = 3;</code>
     */
    public function setSuccessOnTimeout($var)
    {
        GPBUtil::checkBool($var);
        $this->success_on_timeout = $var;
    }

}

