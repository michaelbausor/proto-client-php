<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/clouddebugger/v2/data.proto

namespace Google\Devtools\Clouddebugger\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Represents the application to debug. The application may include one or more
 * replicated processes executing the same code. Each of these processes is
 * attached with a debugger agent, carrying out the debugging commands.
 * The agents attached to the same debuggee are identified by using exactly the
 * same field values when registering.
 * </pre>
 *
 * Protobuf type <code>google.devtools.clouddebugger.v2.Debuggee</code>
 */
class Debuggee extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Unique identifier for the debuggee generated by the controller service.
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    private $id = '';
    /**
     * <pre>
     * Project the debuggee is associated with.
     * Use the project number when registering a Google Cloud Platform project.
     * </pre>
     *
     * <code>string project = 2;</code>
     */
    private $project = '';
    /**
     * <pre>
     * Debuggee uniquifier within the project.
     * Any string that identifies the application within the project can be used.
     * Including environment and version or build IDs is recommended.
     * </pre>
     *
     * <code>string uniquifier = 3;</code>
     */
    private $uniquifier = '';
    /**
     * <pre>
     * Human readable description of the debuggee.
     * Including a human-readable project name, environment name and version
     * information is recommended.
     * </pre>
     *
     * <code>string description = 4;</code>
     */
    private $description = '';
    /**
     * <pre>
     * If set to `true`, indicates that the debuggee is considered as inactive by
     * the Controller service.
     * </pre>
     *
     * <code>bool is_inactive = 5;</code>
     */
    private $is_inactive = false;
    /**
     * <pre>
     * Version ID of the agent release. The version ID is structured as
     * following: `domain/type/vmajor.minor` (for example
     * `google.com/gcp-java/v1.1`).
     * </pre>
     *
     * <code>string agent_version = 6;</code>
     */
    private $agent_version = '';
    /**
     * <pre>
     * If set to `true`, indicates that the agent should disable itself and
     * detach from the debuggee.
     * </pre>
     *
     * <code>bool is_disabled = 7;</code>
     */
    private $is_disabled = false;
    /**
     * <pre>
     * Human readable message to be displayed to the user about this debuggee.
     * Absence of this field indicates no status. The message can be either
     * informational or an error status.
     * </pre>
     *
     * <code>.google.devtools.clouddebugger.v2.StatusMessage status = 8;</code>
     */
    private $status = null;
    /**
     * <pre>
     * References to the locations and revisions of the source code used in the
     * deployed application.
     * NOTE: This field is deprecated. Consumers should use
     * `ext_source_contexts` if it is not empty. Debug agents should populate
     * both this field and `ext_source_contexts`.
     * </pre>
     *
     * <code>repeated .google.devtools.source.v1.SourceContext source_contexts = 9;</code>
     */
    private $source_contexts;
    /**
     * <pre>
     * References to the locations and revisions of the source code used in the
     * deployed application.
     * Contexts describing a remote repo related to the source code
     * have a `category` label of `remote_repo`. Source snapshot source
     * contexts have a `category` of `snapshot`.
     * </pre>
     *
     * <code>repeated .google.devtools.source.v1.ExtendedSourceContext ext_source_contexts = 13;</code>
     */
    private $ext_source_contexts;
    /**
     * <pre>
     * A set of custom debuggee properties, populated by the agent, to be
     * displayed to the user.
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 11;</code>
     */
    private $labels;

    public function __construct() {
        \GPBMetadata\Google\Devtools\Clouddebugger\V2\Data::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Unique identifier for the debuggee generated by the controller service.
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * <pre>
     * Unique identifier for the debuggee generated by the controller service.
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;
    }

    /**
     * <pre>
     * Project the debuggee is associated with.
     * Use the project number when registering a Google Cloud Platform project.
     * </pre>
     *
     * <code>string project = 2;</code>
     */
    public function getProject()
    {
        return $this->project;
    }

    /**
     * <pre>
     * Project the debuggee is associated with.
     * Use the project number when registering a Google Cloud Platform project.
     * </pre>
     *
     * <code>string project = 2;</code>
     */
    public function setProject($var)
    {
        GPBUtil::checkString($var, True);
        $this->project = $var;
    }

    /**
     * <pre>
     * Debuggee uniquifier within the project.
     * Any string that identifies the application within the project can be used.
     * Including environment and version or build IDs is recommended.
     * </pre>
     *
     * <code>string uniquifier = 3;</code>
     */
    public function getUniquifier()
    {
        return $this->uniquifier;
    }

    /**
     * <pre>
     * Debuggee uniquifier within the project.
     * Any string that identifies the application within the project can be used.
     * Including environment and version or build IDs is recommended.
     * </pre>
     *
     * <code>string uniquifier = 3;</code>
     */
    public function setUniquifier($var)
    {
        GPBUtil::checkString($var, True);
        $this->uniquifier = $var;
    }

    /**
     * <pre>
     * Human readable description of the debuggee.
     * Including a human-readable project name, environment name and version
     * information is recommended.
     * </pre>
     *
     * <code>string description = 4;</code>
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * <pre>
     * Human readable description of the debuggee.
     * Including a human-readable project name, environment name and version
     * information is recommended.
     * </pre>
     *
     * <code>string description = 4;</code>
     */
    public function setDescription($var)
    {
        GPBUtil::checkString($var, True);
        $this->description = $var;
    }

    /**
     * <pre>
     * If set to `true`, indicates that the debuggee is considered as inactive by
     * the Controller service.
     * </pre>
     *
     * <code>bool is_inactive = 5;</code>
     */
    public function getIsInactive()
    {
        return $this->is_inactive;
    }

    /**
     * <pre>
     * If set to `true`, indicates that the debuggee is considered as inactive by
     * the Controller service.
     * </pre>
     *
     * <code>bool is_inactive = 5;</code>
     */
    public function setIsInactive($var)
    {
        GPBUtil::checkBool($var);
        $this->is_inactive = $var;
    }

    /**
     * <pre>
     * Version ID of the agent release. The version ID is structured as
     * following: `domain/type/vmajor.minor` (for example
     * `google.com/gcp-java/v1.1`).
     * </pre>
     *
     * <code>string agent_version = 6;</code>
     */
    public function getAgentVersion()
    {
        return $this->agent_version;
    }

    /**
     * <pre>
     * Version ID of the agent release. The version ID is structured as
     * following: `domain/type/vmajor.minor` (for example
     * `google.com/gcp-java/v1.1`).
     * </pre>
     *
     * <code>string agent_version = 6;</code>
     */
    public function setAgentVersion($var)
    {
        GPBUtil::checkString($var, True);
        $this->agent_version = $var;
    }

    /**
     * <pre>
     * If set to `true`, indicates that the agent should disable itself and
     * detach from the debuggee.
     * </pre>
     *
     * <code>bool is_disabled = 7;</code>
     */
    public function getIsDisabled()
    {
        return $this->is_disabled;
    }

    /**
     * <pre>
     * If set to `true`, indicates that the agent should disable itself and
     * detach from the debuggee.
     * </pre>
     *
     * <code>bool is_disabled = 7;</code>
     */
    public function setIsDisabled($var)
    {
        GPBUtil::checkBool($var);
        $this->is_disabled = $var;
    }

    /**
     * <pre>
     * Human readable message to be displayed to the user about this debuggee.
     * Absence of this field indicates no status. The message can be either
     * informational or an error status.
     * </pre>
     *
     * <code>.google.devtools.clouddebugger.v2.StatusMessage status = 8;</code>
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * <pre>
     * Human readable message to be displayed to the user about this debuggee.
     * Absence of this field indicates no status. The message can be either
     * informational or an error status.
     * </pre>
     *
     * <code>.google.devtools.clouddebugger.v2.StatusMessage status = 8;</code>
     */
    public function setStatus(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Clouddebugger\V2\StatusMessage::class);
        $this->status = $var;
    }

    /**
     * <pre>
     * References to the locations and revisions of the source code used in the
     * deployed application.
     * NOTE: This field is deprecated. Consumers should use
     * `ext_source_contexts` if it is not empty. Debug agents should populate
     * both this field and `ext_source_contexts`.
     * </pre>
     *
     * <code>repeated .google.devtools.source.v1.SourceContext source_contexts = 9;</code>
     */
    public function getSourceContexts()
    {
        return $this->source_contexts;
    }

    /**
     * <pre>
     * References to the locations and revisions of the source code used in the
     * deployed application.
     * NOTE: This field is deprecated. Consumers should use
     * `ext_source_contexts` if it is not empty. Debug agents should populate
     * both this field and `ext_source_contexts`.
     * </pre>
     *
     * <code>repeated .google.devtools.source.v1.SourceContext source_contexts = 9;</code>
     */
    public function setSourceContexts(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Devtools\Source\V1\SourceContext::class);
        $this->source_contexts = $var;
    }

    /**
     * <pre>
     * References to the locations and revisions of the source code used in the
     * deployed application.
     * Contexts describing a remote repo related to the source code
     * have a `category` label of `remote_repo`. Source snapshot source
     * contexts have a `category` of `snapshot`.
     * </pre>
     *
     * <code>repeated .google.devtools.source.v1.ExtendedSourceContext ext_source_contexts = 13;</code>
     */
    public function getExtSourceContexts()
    {
        return $this->ext_source_contexts;
    }

    /**
     * <pre>
     * References to the locations and revisions of the source code used in the
     * deployed application.
     * Contexts describing a remote repo related to the source code
     * have a `category` label of `remote_repo`. Source snapshot source
     * contexts have a `category` of `snapshot`.
     * </pre>
     *
     * <code>repeated .google.devtools.source.v1.ExtendedSourceContext ext_source_contexts = 13;</code>
     */
    public function setExtSourceContexts(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Devtools\Source\V1\ExtendedSourceContext::class);
        $this->ext_source_contexts = $var;
    }

    /**
     * <pre>
     * A set of custom debuggee properties, populated by the agent, to be
     * displayed to the user.
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 11;</code>
     */
    public function getLabels()
    {
        return $this->labels;
    }

    /**
     * <pre>
     * A set of custom debuggee properties, populated by the agent, to be
     * displayed to the user.
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 11;</code>
     */
    public function setLabels(&$var)
    {
        $this->labels = $var;
    }

}

