<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/clouddebugger/v2/debugger.proto

namespace Google\Devtools\Clouddebugger\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Response for listing breakpoints.
 * </pre>
 *
 * Protobuf type <code>google.devtools.clouddebugger.v2.ListBreakpointsResponse</code>
 */
class ListBreakpointsResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * List of breakpoints matching the request.
     * The fields `id` and `location` are guaranteed to be set on each breakpoint.
     * The fields: `stack_frames`, `evaluated_expressions` and `variable_table`
     * are cleared on each breakpoint regardless of it's status.
     * </pre>
     *
     * <code>repeated .google.devtools.clouddebugger.v2.Breakpoint breakpoints = 1;</code>
     */
    private $breakpoints;
    /**
     * <pre>
     * A wait token that can be used in the next call to `list` (REST) or
     * `ListBreakpoints` (RPC) to block until the list of breakpoints has changes.
     * </pre>
     *
     * <code>string next_wait_token = 2;</code>
     */
    private $next_wait_token = '';

    public function __construct() {
        \GPBMetadata\Google\Devtools\Clouddebugger\V2\Debugger::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * List of breakpoints matching the request.
     * The fields `id` and `location` are guaranteed to be set on each breakpoint.
     * The fields: `stack_frames`, `evaluated_expressions` and `variable_table`
     * are cleared on each breakpoint regardless of it's status.
     * </pre>
     *
     * <code>repeated .google.devtools.clouddebugger.v2.Breakpoint breakpoints = 1;</code>
     */
    public function getBreakpoints()
    {
        return $this->breakpoints;
    }

    /**
     * <pre>
     * List of breakpoints matching the request.
     * The fields `id` and `location` are guaranteed to be set on each breakpoint.
     * The fields: `stack_frames`, `evaluated_expressions` and `variable_table`
     * are cleared on each breakpoint regardless of it's status.
     * </pre>
     *
     * <code>repeated .google.devtools.clouddebugger.v2.Breakpoint breakpoints = 1;</code>
     */
    public function setBreakpoints(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Devtools\Clouddebugger\V2\Breakpoint::class);
        $this->breakpoints = $var;
    }

    /**
     * <pre>
     * A wait token that can be used in the next call to `list` (REST) or
     * `ListBreakpoints` (RPC) to block until the list of breakpoints has changes.
     * </pre>
     *
     * <code>string next_wait_token = 2;</code>
     */
    public function getNextWaitToken()
    {
        return $this->next_wait_token;
    }

    /**
     * <pre>
     * A wait token that can be used in the next call to `list` (REST) or
     * `ListBreakpoints` (RPC) to block until the list of breakpoints has changes.
     * </pre>
     *
     * <code>string next_wait_token = 2;</code>
     */
    public function setNextWaitToken($var)
    {
        GPBUtil::checkString($var, True);
        $this->next_wait_token = $var;
    }

}

