<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/clouddebugger/v2/data.proto

namespace Google\Devtools\Clouddebugger\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Represents the breakpoint specification, status and results.
 * </pre>
 *
 * Protobuf type <code>google.devtools.clouddebugger.v2.Breakpoint</code>
 */
class Breakpoint extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Breakpoint identifier, unique in the scope of the debuggee.
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    private $id = '';
    /**
     * <pre>
     * Action that the agent should perform when the code at the
     * breakpoint location is hit.
     * </pre>
     *
     * <code>.google.devtools.clouddebugger.v2.Breakpoint.Action action = 13;</code>
     */
    private $action = 0;
    /**
     * <pre>
     * Breakpoint source location.
     * </pre>
     *
     * <code>.google.devtools.clouddebugger.v2.SourceLocation location = 2;</code>
     */
    private $location = null;
    /**
     * <pre>
     * Condition that triggers the breakpoint.
     * The condition is a compound boolean expression composed using expressions
     * in a programming language at the source location.
     * </pre>
     *
     * <code>string condition = 3;</code>
     */
    private $condition = '';
    /**
     * <pre>
     * List of read-only expressions to evaluate at the breakpoint location.
     * The expressions are composed using expressions in the programming language
     * at the source location. If the breakpoint action is `LOG`, the evaluated
     * expressions are included in log statements.
     * </pre>
     *
     * <code>repeated string expressions = 4;</code>
     */
    private $expressions;
    /**
     * <pre>
     * Only relevant when action is `LOG`. Defines the message to log when
     * the breakpoint hits. The message may include parameter placeholders `$0`,
     * `$1`, etc. These placeholders are replaced with the evaluated value
     * of the appropriate expression. Expressions not referenced in
     * `log_message_format` are not logged.
     * Example: `Message received, id = $0, count = $1` with
     * `expressions` = `[ message.id, message.count ]`.
     * </pre>
     *
     * <code>string log_message_format = 14;</code>
     */
    private $log_message_format = '';
    /**
     * <pre>
     * Indicates the severity of the log. Only relevant when action is `LOG`.
     * </pre>
     *
     * <code>.google.devtools.clouddebugger.v2.Breakpoint.LogLevel log_level = 15;</code>
     */
    private $log_level = 0;
    /**
     * <pre>
     * When true, indicates that this is a final result and the
     * breakpoint state will not change from here on.
     * </pre>
     *
     * <code>bool is_final_state = 5;</code>
     */
    private $is_final_state = false;
    /**
     * <pre>
     * Time this breakpoint was created by the server in seconds resolution.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp create_time = 11;</code>
     */
    private $create_time = null;
    /**
     * <pre>
     * Time this breakpoint was finalized as seen by the server in seconds
     * resolution.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp final_time = 12;</code>
     */
    private $final_time = null;
    /**
     * <pre>
     * E-mail address of the user that created this breakpoint
     * </pre>
     *
     * <code>string user_email = 16;</code>
     */
    private $user_email = '';
    /**
     * <pre>
     * Breakpoint status.
     * The status includes an error flag and a human readable message.
     * This field is usually unset. The message can be either
     * informational or an error message. Regardless, clients should always
     * display the text message back to the user.
     * Error status indicates complete failure of the breakpoint.
     * Example (non-final state): `Still loading symbols...`
     * Examples (final state):
     * *   `Invalid line number` referring to location
     * *   `Field f not found in class C` referring to condition
     * </pre>
     *
     * <code>.google.devtools.clouddebugger.v2.StatusMessage status = 10;</code>
     */
    private $status = null;
    /**
     * <pre>
     * The stack at breakpoint time.
     * </pre>
     *
     * <code>repeated .google.devtools.clouddebugger.v2.StackFrame stack_frames = 7;</code>
     */
    private $stack_frames;
    /**
     * <pre>
     * Values of evaluated expressions at breakpoint time.
     * The evaluated expressions appear in exactly the same order they
     * are listed in the `expressions` field.
     * The `name` field holds the original expression text, the `value` or
     * `members` field holds the result of the evaluated expression.
     * If the expression cannot be evaluated, the `status` inside the `Variable`
     * will indicate an error and contain the error text.
     * </pre>
     *
     * <code>repeated .google.devtools.clouddebugger.v2.Variable evaluated_expressions = 8;</code>
     */
    private $evaluated_expressions;
    /**
     * <pre>
     * The `variable_table` exists to aid with computation, memory and network
     * traffic optimization.  It enables storing a variable once and reference
     * it from multiple variables, including variables stored in the
     * `variable_table` itself.
     * For example, the same `this` object, which may appear at many levels of
     * the stack, can have all of its data stored once in this table.  The
     * stack frame variables then would hold only a reference to it.
     * The variable `var_table_index` field is an index into this repeated field.
     * The stored objects are nameless and get their name from the referencing
     * variable. The effective variable is a merge of the referencing variable
     * and the referenced variable.
     * </pre>
     *
     * <code>repeated .google.devtools.clouddebugger.v2.Variable variable_table = 9;</code>
     */
    private $variable_table;
    /**
     * <pre>
     * A set of custom breakpoint properties, populated by the agent, to be
     * displayed to the user.
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 17;</code>
     */
    private $labels;

    public function __construct() {
        \GPBMetadata\Google\Devtools\Clouddebugger\V2\Data::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Breakpoint identifier, unique in the scope of the debuggee.
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * <pre>
     * Breakpoint identifier, unique in the scope of the debuggee.
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;
    }

    /**
     * <pre>
     * Action that the agent should perform when the code at the
     * breakpoint location is hit.
     * </pre>
     *
     * <code>.google.devtools.clouddebugger.v2.Breakpoint.Action action = 13;</code>
     */
    public function getAction()
    {
        return $this->action;
    }

    /**
     * <pre>
     * Action that the agent should perform when the code at the
     * breakpoint location is hit.
     * </pre>
     *
     * <code>.google.devtools.clouddebugger.v2.Breakpoint.Action action = 13;</code>
     */
    public function setAction($var)
    {
        GPBUtil::checkEnum($var, \Google\Devtools\Clouddebugger\V2\Breakpoint_Action::class);
        $this->action = $var;
    }

    /**
     * <pre>
     * Breakpoint source location.
     * </pre>
     *
     * <code>.google.devtools.clouddebugger.v2.SourceLocation location = 2;</code>
     */
    public function getLocation()
    {
        return $this->location;
    }

    /**
     * <pre>
     * Breakpoint source location.
     * </pre>
     *
     * <code>.google.devtools.clouddebugger.v2.SourceLocation location = 2;</code>
     */
    public function setLocation(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Clouddebugger\V2\SourceLocation::class);
        $this->location = $var;
    }

    /**
     * <pre>
     * Condition that triggers the breakpoint.
     * The condition is a compound boolean expression composed using expressions
     * in a programming language at the source location.
     * </pre>
     *
     * <code>string condition = 3;</code>
     */
    public function getCondition()
    {
        return $this->condition;
    }

    /**
     * <pre>
     * Condition that triggers the breakpoint.
     * The condition is a compound boolean expression composed using expressions
     * in a programming language at the source location.
     * </pre>
     *
     * <code>string condition = 3;</code>
     */
    public function setCondition($var)
    {
        GPBUtil::checkString($var, True);
        $this->condition = $var;
    }

    /**
     * <pre>
     * List of read-only expressions to evaluate at the breakpoint location.
     * The expressions are composed using expressions in the programming language
     * at the source location. If the breakpoint action is `LOG`, the evaluated
     * expressions are included in log statements.
     * </pre>
     *
     * <code>repeated string expressions = 4;</code>
     */
    public function getExpressions()
    {
        return $this->expressions;
    }

    /**
     * <pre>
     * List of read-only expressions to evaluate at the breakpoint location.
     * The expressions are composed using expressions in the programming language
     * at the source location. If the breakpoint action is `LOG`, the evaluated
     * expressions are included in log statements.
     * </pre>
     *
     * <code>repeated string expressions = 4;</code>
     */
    public function setExpressions(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->expressions = $var;
    }

    /**
     * <pre>
     * Only relevant when action is `LOG`. Defines the message to log when
     * the breakpoint hits. The message may include parameter placeholders `$0`,
     * `$1`, etc. These placeholders are replaced with the evaluated value
     * of the appropriate expression. Expressions not referenced in
     * `log_message_format` are not logged.
     * Example: `Message received, id = $0, count = $1` with
     * `expressions` = `[ message.id, message.count ]`.
     * </pre>
     *
     * <code>string log_message_format = 14;</code>
     */
    public function getLogMessageFormat()
    {
        return $this->log_message_format;
    }

    /**
     * <pre>
     * Only relevant when action is `LOG`. Defines the message to log when
     * the breakpoint hits. The message may include parameter placeholders `$0`,
     * `$1`, etc. These placeholders are replaced with the evaluated value
     * of the appropriate expression. Expressions not referenced in
     * `log_message_format` are not logged.
     * Example: `Message received, id = $0, count = $1` with
     * `expressions` = `[ message.id, message.count ]`.
     * </pre>
     *
     * <code>string log_message_format = 14;</code>
     */
    public function setLogMessageFormat($var)
    {
        GPBUtil::checkString($var, True);
        $this->log_message_format = $var;
    }

    /**
     * <pre>
     * Indicates the severity of the log. Only relevant when action is `LOG`.
     * </pre>
     *
     * <code>.google.devtools.clouddebugger.v2.Breakpoint.LogLevel log_level = 15;</code>
     */
    public function getLogLevel()
    {
        return $this->log_level;
    }

    /**
     * <pre>
     * Indicates the severity of the log. Only relevant when action is `LOG`.
     * </pre>
     *
     * <code>.google.devtools.clouddebugger.v2.Breakpoint.LogLevel log_level = 15;</code>
     */
    public function setLogLevel($var)
    {
        GPBUtil::checkEnum($var, \Google\Devtools\Clouddebugger\V2\Breakpoint_LogLevel::class);
        $this->log_level = $var;
    }

    /**
     * <pre>
     * When true, indicates that this is a final result and the
     * breakpoint state will not change from here on.
     * </pre>
     *
     * <code>bool is_final_state = 5;</code>
     */
    public function getIsFinalState()
    {
        return $this->is_final_state;
    }

    /**
     * <pre>
     * When true, indicates that this is a final result and the
     * breakpoint state will not change from here on.
     * </pre>
     *
     * <code>bool is_final_state = 5;</code>
     */
    public function setIsFinalState($var)
    {
        GPBUtil::checkBool($var);
        $this->is_final_state = $var;
    }

    /**
     * <pre>
     * Time this breakpoint was created by the server in seconds resolution.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp create_time = 11;</code>
     */
    public function getCreateTime()
    {
        return $this->create_time;
    }

    /**
     * <pre>
     * Time this breakpoint was created by the server in seconds resolution.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp create_time = 11;</code>
     */
    public function setCreateTime(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->create_time = $var;
    }

    /**
     * <pre>
     * Time this breakpoint was finalized as seen by the server in seconds
     * resolution.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp final_time = 12;</code>
     */
    public function getFinalTime()
    {
        return $this->final_time;
    }

    /**
     * <pre>
     * Time this breakpoint was finalized as seen by the server in seconds
     * resolution.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp final_time = 12;</code>
     */
    public function setFinalTime(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->final_time = $var;
    }

    /**
     * <pre>
     * E-mail address of the user that created this breakpoint
     * </pre>
     *
     * <code>string user_email = 16;</code>
     */
    public function getUserEmail()
    {
        return $this->user_email;
    }

    /**
     * <pre>
     * E-mail address of the user that created this breakpoint
     * </pre>
     *
     * <code>string user_email = 16;</code>
     */
    public function setUserEmail($var)
    {
        GPBUtil::checkString($var, True);
        $this->user_email = $var;
    }

    /**
     * <pre>
     * Breakpoint status.
     * The status includes an error flag and a human readable message.
     * This field is usually unset. The message can be either
     * informational or an error message. Regardless, clients should always
     * display the text message back to the user.
     * Error status indicates complete failure of the breakpoint.
     * Example (non-final state): `Still loading symbols...`
     * Examples (final state):
     * *   `Invalid line number` referring to location
     * *   `Field f not found in class C` referring to condition
     * </pre>
     *
     * <code>.google.devtools.clouddebugger.v2.StatusMessage status = 10;</code>
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * <pre>
     * Breakpoint status.
     * The status includes an error flag and a human readable message.
     * This field is usually unset. The message can be either
     * informational or an error message. Regardless, clients should always
     * display the text message back to the user.
     * Error status indicates complete failure of the breakpoint.
     * Example (non-final state): `Still loading symbols...`
     * Examples (final state):
     * *   `Invalid line number` referring to location
     * *   `Field f not found in class C` referring to condition
     * </pre>
     *
     * <code>.google.devtools.clouddebugger.v2.StatusMessage status = 10;</code>
     */
    public function setStatus(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Clouddebugger\V2\StatusMessage::class);
        $this->status = $var;
    }

    /**
     * <pre>
     * The stack at breakpoint time.
     * </pre>
     *
     * <code>repeated .google.devtools.clouddebugger.v2.StackFrame stack_frames = 7;</code>
     */
    public function getStackFrames()
    {
        return $this->stack_frames;
    }

    /**
     * <pre>
     * The stack at breakpoint time.
     * </pre>
     *
     * <code>repeated .google.devtools.clouddebugger.v2.StackFrame stack_frames = 7;</code>
     */
    public function setStackFrames(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Devtools\Clouddebugger\V2\StackFrame::class);
        $this->stack_frames = $var;
    }

    /**
     * <pre>
     * Values of evaluated expressions at breakpoint time.
     * The evaluated expressions appear in exactly the same order they
     * are listed in the `expressions` field.
     * The `name` field holds the original expression text, the `value` or
     * `members` field holds the result of the evaluated expression.
     * If the expression cannot be evaluated, the `status` inside the `Variable`
     * will indicate an error and contain the error text.
     * </pre>
     *
     * <code>repeated .google.devtools.clouddebugger.v2.Variable evaluated_expressions = 8;</code>
     */
    public function getEvaluatedExpressions()
    {
        return $this->evaluated_expressions;
    }

    /**
     * <pre>
     * Values of evaluated expressions at breakpoint time.
     * The evaluated expressions appear in exactly the same order they
     * are listed in the `expressions` field.
     * The `name` field holds the original expression text, the `value` or
     * `members` field holds the result of the evaluated expression.
     * If the expression cannot be evaluated, the `status` inside the `Variable`
     * will indicate an error and contain the error text.
     * </pre>
     *
     * <code>repeated .google.devtools.clouddebugger.v2.Variable evaluated_expressions = 8;</code>
     */
    public function setEvaluatedExpressions(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Devtools\Clouddebugger\V2\Variable::class);
        $this->evaluated_expressions = $var;
    }

    /**
     * <pre>
     * The `variable_table` exists to aid with computation, memory and network
     * traffic optimization.  It enables storing a variable once and reference
     * it from multiple variables, including variables stored in the
     * `variable_table` itself.
     * For example, the same `this` object, which may appear at many levels of
     * the stack, can have all of its data stored once in this table.  The
     * stack frame variables then would hold only a reference to it.
     * The variable `var_table_index` field is an index into this repeated field.
     * The stored objects are nameless and get their name from the referencing
     * variable. The effective variable is a merge of the referencing variable
     * and the referenced variable.
     * </pre>
     *
     * <code>repeated .google.devtools.clouddebugger.v2.Variable variable_table = 9;</code>
     */
    public function getVariableTable()
    {
        return $this->variable_table;
    }

    /**
     * <pre>
     * The `variable_table` exists to aid with computation, memory and network
     * traffic optimization.  It enables storing a variable once and reference
     * it from multiple variables, including variables stored in the
     * `variable_table` itself.
     * For example, the same `this` object, which may appear at many levels of
     * the stack, can have all of its data stored once in this table.  The
     * stack frame variables then would hold only a reference to it.
     * The variable `var_table_index` field is an index into this repeated field.
     * The stored objects are nameless and get their name from the referencing
     * variable. The effective variable is a merge of the referencing variable
     * and the referenced variable.
     * </pre>
     *
     * <code>repeated .google.devtools.clouddebugger.v2.Variable variable_table = 9;</code>
     */
    public function setVariableTable(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Devtools\Clouddebugger\V2\Variable::class);
        $this->variable_table = $var;
    }

    /**
     * <pre>
     * A set of custom breakpoint properties, populated by the agent, to be
     * displayed to the user.
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 17;</code>
     */
    public function getLabels()
    {
        return $this->labels;
    }

    /**
     * <pre>
     * A set of custom breakpoint properties, populated by the agent, to be
     * displayed to the user.
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 17;</code>
     */
    public function setLabels(&$var)
    {
        $this->labels = $var;
    }

}

