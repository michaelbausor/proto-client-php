<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/cloudtrace/v1/trace.proto

namespace Google\Devtools\Cloudtrace\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * A span represents a single timed event within a trace. Spans can be nested
 * and form a trace tree. Often, a trace contains a root span that describes the
 * end-to-end latency of an operation and, optionally, one or more subspans for
 * its suboperations. Spans do not need to be contiguous. There may be gaps
 * between spans in a trace.
 * </pre>
 *
 * Protobuf type <code>google.devtools.cloudtrace.v1.TraceSpan</code>
 */
class TraceSpan extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Identifier for the span. Must be a 64-bit integer other than 0 and
     * unique within a trace.
     * </pre>
     *
     * <code>fixed64 span_id = 1;</code>
     */
    private $span_id = 0;
    /**
     * <pre>
     * Distinguishes between spans generated in a particular context. For example,
     * two spans with the same name may be distinguished using `RPC_CLIENT`
     * and `RPC_SERVER` to identify queueing latency associated with the span.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v1.TraceSpan.SpanKind kind = 2;</code>
     */
    private $kind = 0;
    /**
     * <pre>
     * Name of the trace. The trace name is sanitized and displayed in the
     * Stackdriver Trace tool in the Google Developers Console.
     * The name may be a method name or some other per-call site name.
     * For the same executable and the same call point, a best practice is
     * to use a consistent name, which makes it easier to correlate
     * cross-trace spans.
     * </pre>
     *
     * <code>string name = 3;</code>
     */
    private $name = '';
    /**
     * <pre>
     * Start time of the span in nanoseconds from the UNIX epoch.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 4;</code>
     */
    private $start_time = null;
    /**
     * <pre>
     * End time of the span in nanoseconds from the UNIX epoch.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end_time = 5;</code>
     */
    private $end_time = null;
    /**
     * <pre>
     * ID of the parent span, if any. Optional.
     * </pre>
     *
     * <code>fixed64 parent_span_id = 6;</code>
     */
    private $parent_span_id = 0;
    /**
     * <pre>
     * Collection of labels associated with the span.
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 7;</code>
     */
    private $labels;

    public function __construct() {
        \GPBMetadata\Google\Devtools\Cloudtrace\V1\Trace::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Identifier for the span. Must be a 64-bit integer other than 0 and
     * unique within a trace.
     * </pre>
     *
     * <code>fixed64 span_id = 1;</code>
     */
    public function getSpanId()
    {
        return $this->span_id;
    }

    /**
     * <pre>
     * Identifier for the span. Must be a 64-bit integer other than 0 and
     * unique within a trace.
     * </pre>
     *
     * <code>fixed64 span_id = 1;</code>
     */
    public function setSpanId($var)
    {
        GPBUtil::checkUint64($var);
        $this->span_id = $var;
    }

    /**
     * <pre>
     * Distinguishes between spans generated in a particular context. For example,
     * two spans with the same name may be distinguished using `RPC_CLIENT`
     * and `RPC_SERVER` to identify queueing latency associated with the span.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v1.TraceSpan.SpanKind kind = 2;</code>
     */
    public function getKind()
    {
        return $this->kind;
    }

    /**
     * <pre>
     * Distinguishes between spans generated in a particular context. For example,
     * two spans with the same name may be distinguished using `RPC_CLIENT`
     * and `RPC_SERVER` to identify queueing latency associated with the span.
     * </pre>
     *
     * <code>.google.devtools.cloudtrace.v1.TraceSpan.SpanKind kind = 2;</code>
     */
    public function setKind($var)
    {
        GPBUtil::checkEnum($var, \Google\Devtools\Cloudtrace\V1\TraceSpan_SpanKind::class);
        $this->kind = $var;
    }

    /**
     * <pre>
     * Name of the trace. The trace name is sanitized and displayed in the
     * Stackdriver Trace tool in the Google Developers Console.
     * The name may be a method name or some other per-call site name.
     * For the same executable and the same call point, a best practice is
     * to use a consistent name, which makes it easier to correlate
     * cross-trace spans.
     * </pre>
     *
     * <code>string name = 3;</code>
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * <pre>
     * Name of the trace. The trace name is sanitized and displayed in the
     * Stackdriver Trace tool in the Google Developers Console.
     * The name may be a method name or some other per-call site name.
     * For the same executable and the same call point, a best practice is
     * to use a consistent name, which makes it easier to correlate
     * cross-trace spans.
     * </pre>
     *
     * <code>string name = 3;</code>
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;
    }

    /**
     * <pre>
     * Start time of the span in nanoseconds from the UNIX epoch.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 4;</code>
     */
    public function getStartTime()
    {
        return $this->start_time;
    }

    /**
     * <pre>
     * Start time of the span in nanoseconds from the UNIX epoch.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 4;</code>
     */
    public function setStartTime(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->start_time = $var;
    }

    /**
     * <pre>
     * End time of the span in nanoseconds from the UNIX epoch.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end_time = 5;</code>
     */
    public function getEndTime()
    {
        return $this->end_time;
    }

    /**
     * <pre>
     * End time of the span in nanoseconds from the UNIX epoch.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end_time = 5;</code>
     */
    public function setEndTime(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->end_time = $var;
    }

    /**
     * <pre>
     * ID of the parent span, if any. Optional.
     * </pre>
     *
     * <code>fixed64 parent_span_id = 6;</code>
     */
    public function getParentSpanId()
    {
        return $this->parent_span_id;
    }

    /**
     * <pre>
     * ID of the parent span, if any. Optional.
     * </pre>
     *
     * <code>fixed64 parent_span_id = 6;</code>
     */
    public function setParentSpanId($var)
    {
        GPBUtil::checkUint64($var);
        $this->parent_span_id = $var;
    }

    /**
     * <pre>
     * Collection of labels associated with the span.
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 7;</code>
     */
    public function getLabels()
    {
        return $this->labels;
    }

    /**
     * <pre>
     * Collection of labels associated with the span.
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 7;</code>
     */
    public function setLabels(&$var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::STRING);
        $this->labels = $arr;
    }

}

