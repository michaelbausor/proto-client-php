<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/clouderrorreporting/v1beta1/common.proto

namespace Google\Devtools\Clouderrorreporting\V1beta1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * A description of the context in which an error occurred.
 * This data should be provided by the application when reporting an error,
 * unless the
 * error report has been generated automatically from Google App Engine logs.
 * </pre>
 *
 * Protobuf type <code>google.devtools.clouderrorreporting.v1beta1.ErrorContext</code>
 */
class ErrorContext extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * The HTTP request which was processed when the error was
     * triggered.
     * </pre>
     *
     * <code>.google.devtools.clouderrorreporting.v1beta1.HttpRequestContext http_request = 1;</code>
     */
    private $http_request = null;
    /**
     * <pre>
     * The user who caused or was affected by the crash.
     * This can be a user ID, an email address, or an arbitrary token that
     * uniquely identifies the user.
     * When sending an error report, leave this field empty if the user was not
     * logged in. In this case the
     * Error Reporting system will use other data, such as remote IP address, to
     * distinguish affected users. See `affected_users_count` in
     * `ErrorGroupStats`.
     * </pre>
     *
     * <code>string user = 2;</code>
     */
    private $user = '';
    /**
     * <pre>
     * The location in the source code where the decision was made to
     * report the error, usually the place where it was logged.
     * For a logged exception this would be the source line where the
     * exception is logged, usually close to the place where it was
     * caught. This value is in contrast to `Exception.cause_location`,
     * which describes the source line where the exception was thrown.
     * </pre>
     *
     * <code>.google.devtools.clouderrorreporting.v1beta1.SourceLocation report_location = 3;</code>
     */
    private $report_location = null;

    public function __construct() {
        \GPBMetadata\Google\Devtools\Clouderrorreporting\V1Beta1\Common::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * The HTTP request which was processed when the error was
     * triggered.
     * </pre>
     *
     * <code>.google.devtools.clouderrorreporting.v1beta1.HttpRequestContext http_request = 1;</code>
     */
    public function getHttpRequest()
    {
        return $this->http_request;
    }

    /**
     * <pre>
     * The HTTP request which was processed when the error was
     * triggered.
     * </pre>
     *
     * <code>.google.devtools.clouderrorreporting.v1beta1.HttpRequestContext http_request = 1;</code>
     */
    public function setHttpRequest(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Clouderrorreporting\V1beta1\HttpRequestContext::class);
        $this->http_request = $var;
    }

    /**
     * <pre>
     * The user who caused or was affected by the crash.
     * This can be a user ID, an email address, or an arbitrary token that
     * uniquely identifies the user.
     * When sending an error report, leave this field empty if the user was not
     * logged in. In this case the
     * Error Reporting system will use other data, such as remote IP address, to
     * distinguish affected users. See `affected_users_count` in
     * `ErrorGroupStats`.
     * </pre>
     *
     * <code>string user = 2;</code>
     */
    public function getUser()
    {
        return $this->user;
    }

    /**
     * <pre>
     * The user who caused or was affected by the crash.
     * This can be a user ID, an email address, or an arbitrary token that
     * uniquely identifies the user.
     * When sending an error report, leave this field empty if the user was not
     * logged in. In this case the
     * Error Reporting system will use other data, such as remote IP address, to
     * distinguish affected users. See `affected_users_count` in
     * `ErrorGroupStats`.
     * </pre>
     *
     * <code>string user = 2;</code>
     */
    public function setUser($var)
    {
        GPBUtil::checkString($var, True);
        $this->user = $var;
    }

    /**
     * <pre>
     * The location in the source code where the decision was made to
     * report the error, usually the place where it was logged.
     * For a logged exception this would be the source line where the
     * exception is logged, usually close to the place where it was
     * caught. This value is in contrast to `Exception.cause_location`,
     * which describes the source line where the exception was thrown.
     * </pre>
     *
     * <code>.google.devtools.clouderrorreporting.v1beta1.SourceLocation report_location = 3;</code>
     */
    public function getReportLocation()
    {
        return $this->report_location;
    }

    /**
     * <pre>
     * The location in the source code where the decision was made to
     * report the error, usually the place where it was logged.
     * For a logged exception this would be the source line where the
     * exception is logged, usually close to the place where it was
     * caught. This value is in contrast to `Exception.cause_location`,
     * which describes the source line where the exception was thrown.
     * </pre>
     *
     * <code>.google.devtools.clouderrorreporting.v1beta1.SourceLocation report_location = 3;</code>
     */
    public function setReportLocation(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Clouderrorreporting\V1beta1\SourceLocation::class);
        $this->report_location = $var;
    }

}

