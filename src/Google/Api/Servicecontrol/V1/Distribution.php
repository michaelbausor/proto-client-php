<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/api/servicecontrol/v1/distribution.proto

namespace Google\Api\Servicecontrol\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Distribution represents a frequency distribution of double-valued sample
 * points. It contains the size of the population of sample points plus
 * additional optional information:
 *   - the arithmetic mean of the samples
 *   - the minimum and maximum of the samples
 *   - the sum-squared-deviation of the samples, used to compute variance
 *   - a histogram of the values of the sample points
 * </pre>
 *
 * Protobuf type <code>google.api.servicecontrol.v1.Distribution</code>
 */
class Distribution extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * The total number of samples in the distribution. Must be &gt;= 0.
     * </pre>
     *
     * <code>int64 count = 1;</code>
     */
    private $count = 0;
    /**
     * <pre>
     * The arithmetic mean of the samples in the distribution. If `count` is
     * zero then this field must be zero.
     * </pre>
     *
     * <code>double mean = 2;</code>
     */
    private $mean = 0.0;
    /**
     * <pre>
     * The minimum of the population of values. Ignored if `count` is zero.
     * </pre>
     *
     * <code>double minimum = 3;</code>
     */
    private $minimum = 0.0;
    /**
     * <pre>
     * The maximum of the population of values. Ignored if `count` is zero.
     * </pre>
     *
     * <code>double maximum = 4;</code>
     */
    private $maximum = 0.0;
    /**
     * <pre>
     * The sum of squared deviations from the mean:
     *   Sum[i=1..count]((x_i - mean)^2)
     * where each x_i is a sample values. If `count` is zero then this field
     * must be zero, otherwise validation of the request fails.
     * </pre>
     *
     * <code>double sum_of_squared_deviation = 5;</code>
     */
    private $sum_of_squared_deviation = 0.0;
    /**
     * <pre>
     * The number of samples in each histogram bucket. `bucket_counts` are
     * optional. If present, they must sum to the `count` value.
     * The buckets are defined below in `bucket_option`. There are N buckets.
     * `bucket_counts[0]` is the number of samples in the underflow bucket.
     * `bucket_counts[1]` to `bucket_counts[N-1]` are the numbers of samples
     * in each of the finite buckets. And `bucket_counts[N] is the number
     * of samples in the overflow bucket. See the comments of `bucket_option`
     * below for more details.
     * Any suffix of trailing zeros may be omitted.
     * </pre>
     *
     * <code>repeated int64 bucket_counts = 6;</code>
     */
    private $bucket_counts;
    protected $bucket_option;

    public function __construct() {
        \GPBMetadata\Google\Api\Servicecontrol\V1\Distribution::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * The total number of samples in the distribution. Must be &gt;= 0.
     * </pre>
     *
     * <code>int64 count = 1;</code>
     */
    public function getCount()
    {
        return $this->count;
    }

    /**
     * <pre>
     * The total number of samples in the distribution. Must be &gt;= 0.
     * </pre>
     *
     * <code>int64 count = 1;</code>
     */
    public function setCount($var)
    {
        GPBUtil::checkInt64($var);
        $this->count = $var;
    }

    /**
     * <pre>
     * The arithmetic mean of the samples in the distribution. If `count` is
     * zero then this field must be zero.
     * </pre>
     *
     * <code>double mean = 2;</code>
     */
    public function getMean()
    {
        return $this->mean;
    }

    /**
     * <pre>
     * The arithmetic mean of the samples in the distribution. If `count` is
     * zero then this field must be zero.
     * </pre>
     *
     * <code>double mean = 2;</code>
     */
    public function setMean($var)
    {
        GPBUtil::checkDouble($var);
        $this->mean = $var;
    }

    /**
     * <pre>
     * The minimum of the population of values. Ignored if `count` is zero.
     * </pre>
     *
     * <code>double minimum = 3;</code>
     */
    public function getMinimum()
    {
        return $this->minimum;
    }

    /**
     * <pre>
     * The minimum of the population of values. Ignored if `count` is zero.
     * </pre>
     *
     * <code>double minimum = 3;</code>
     */
    public function setMinimum($var)
    {
        GPBUtil::checkDouble($var);
        $this->minimum = $var;
    }

    /**
     * <pre>
     * The maximum of the population of values. Ignored if `count` is zero.
     * </pre>
     *
     * <code>double maximum = 4;</code>
     */
    public function getMaximum()
    {
        return $this->maximum;
    }

    /**
     * <pre>
     * The maximum of the population of values. Ignored if `count` is zero.
     * </pre>
     *
     * <code>double maximum = 4;</code>
     */
    public function setMaximum($var)
    {
        GPBUtil::checkDouble($var);
        $this->maximum = $var;
    }

    /**
     * <pre>
     * The sum of squared deviations from the mean:
     *   Sum[i=1..count]((x_i - mean)^2)
     * where each x_i is a sample values. If `count` is zero then this field
     * must be zero, otherwise validation of the request fails.
     * </pre>
     *
     * <code>double sum_of_squared_deviation = 5;</code>
     */
    public function getSumOfSquaredDeviation()
    {
        return $this->sum_of_squared_deviation;
    }

    /**
     * <pre>
     * The sum of squared deviations from the mean:
     *   Sum[i=1..count]((x_i - mean)^2)
     * where each x_i is a sample values. If `count` is zero then this field
     * must be zero, otherwise validation of the request fails.
     * </pre>
     *
     * <code>double sum_of_squared_deviation = 5;</code>
     */
    public function setSumOfSquaredDeviation($var)
    {
        GPBUtil::checkDouble($var);
        $this->sum_of_squared_deviation = $var;
    }

    /**
     * <pre>
     * The number of samples in each histogram bucket. `bucket_counts` are
     * optional. If present, they must sum to the `count` value.
     * The buckets are defined below in `bucket_option`. There are N buckets.
     * `bucket_counts[0]` is the number of samples in the underflow bucket.
     * `bucket_counts[1]` to `bucket_counts[N-1]` are the numbers of samples
     * in each of the finite buckets. And `bucket_counts[N] is the number
     * of samples in the overflow bucket. See the comments of `bucket_option`
     * below for more details.
     * Any suffix of trailing zeros may be omitted.
     * </pre>
     *
     * <code>repeated int64 bucket_counts = 6;</code>
     */
    public function getBucketCounts()
    {
        return $this->bucket_counts;
    }

    /**
     * <pre>
     * The number of samples in each histogram bucket. `bucket_counts` are
     * optional. If present, they must sum to the `count` value.
     * The buckets are defined below in `bucket_option`. There are N buckets.
     * `bucket_counts[0]` is the number of samples in the underflow bucket.
     * `bucket_counts[1]` to `bucket_counts[N-1]` are the numbers of samples
     * in each of the finite buckets. And `bucket_counts[N] is the number
     * of samples in the overflow bucket. See the comments of `bucket_option`
     * below for more details.
     * Any suffix of trailing zeros may be omitted.
     * </pre>
     *
     * <code>repeated int64 bucket_counts = 6;</code>
     */
    public function setBucketCounts(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::INT64);
        $this->bucket_counts = $var;
    }

    /**
     * <pre>
     * Buckets with constant width.
     * </pre>
     *
     * <code>.google.api.servicecontrol.v1.Distribution.LinearBuckets linear_buckets = 7;</code>
     */
    public function getLinearBuckets()
    {
        return $this->readOneof(7);
    }

    /**
     * <pre>
     * Buckets with constant width.
     * </pre>
     *
     * <code>.google.api.servicecontrol.v1.Distribution.LinearBuckets linear_buckets = 7;</code>
     */
    public function setLinearBuckets(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Api\Servicecontrol\V1\Distribution_LinearBuckets::class);
        $this->writeOneof(7, $var);
    }

    /**
     * <pre>
     * Buckets with exponentially growing width.
     * </pre>
     *
     * <code>.google.api.servicecontrol.v1.Distribution.ExponentialBuckets exponential_buckets = 8;</code>
     */
    public function getExponentialBuckets()
    {
        return $this->readOneof(8);
    }

    /**
     * <pre>
     * Buckets with exponentially growing width.
     * </pre>
     *
     * <code>.google.api.servicecontrol.v1.Distribution.ExponentialBuckets exponential_buckets = 8;</code>
     */
    public function setExponentialBuckets(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Api\Servicecontrol\V1\Distribution_ExponentialBuckets::class);
        $this->writeOneof(8, $var);
    }

    /**
     * <pre>
     * Buckets with arbitrary user-provided width.
     * </pre>
     *
     * <code>.google.api.servicecontrol.v1.Distribution.ExplicitBuckets explicit_buckets = 9;</code>
     */
    public function getExplicitBuckets()
    {
        return $this->readOneof(9);
    }

    /**
     * <pre>
     * Buckets with arbitrary user-provided width.
     * </pre>
     *
     * <code>.google.api.servicecontrol.v1.Distribution.ExplicitBuckets explicit_buckets = 9;</code>
     */
    public function setExplicitBuckets(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Api\Servicecontrol\V1\Distribution_ExplicitBuckets::class);
        $this->writeOneof(9, $var);
    }

    public function getBucketOption()
    {
        return $this->bucket_option;
    }

}

