<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/api/servicecontrol/v1/service_controller.proto

namespace Google\Api\Servicecontrol\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Response message for the Report method.
 * </pre>
 *
 * Protobuf type <code>google.api.servicecontrol.v1.ReportResponse</code>
 */
class ReportResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    private $report_errors;
    /**
     * <pre>
     * The actual config id used to process the request.
     * </pre>
     *
     * <code>string service_config_id = 2;</code>
     */
    private $service_config_id = '';

    public function __construct() {
        \GPBMetadata\Google\Api\Servicecontrol\V1\ServiceController::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public function getReportErrors()
    {
        return $this->report_errors;
    }

    /**
     * <pre>
     * Partial failures, one for each `Operation` in the request that failed
     * processing. There are three possible combinations of the RPC status:
     * 1. The combination of a successful RPC status and an empty `report_errors`
     *    list indicates a complete success where all `Operations` in the
     *    request are processed successfully.
     * 2. The combination of a successful RPC status and a non-empty
     *    `report_errors` list indicates a partial success where some
     *    `Operations` in the request succeeded. Each
     *    `Operation` that failed processing has a corresponding item
     *    in this list.
     * 3. A failed RPC status indicates a complete failure where none of the
     *    `Operations` in the request succeeded.
     * </pre>
     *
     * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
     */
    public function setReportErrors(&$var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Api\Servicecontrol\V1\ReportResponse_ReportError::class);
        $this->report_errors = $arr;
    }

    /**
     * <pre>
     * The actual config id used to process the request.
     * </pre>
     *
     * <code>string service_config_id = 2;</code>
     */
    public function getServiceConfigId()
    {
        return $this->service_config_id;
    }

    /**
     * <pre>
     * The actual config id used to process the request.
     * </pre>
     *
     * <code>string service_config_id = 2;</code>
     */
    public function setServiceConfigId($var)
    {
        GPBUtil::checkString($var, True);
        $this->service_config_id = $var;
    }

}

