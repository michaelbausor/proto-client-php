<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/api/servicecontrol/v1/distribution.proto

namespace Google\Api\Servicecontrol\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Describing buckets with constant width.
 * </pre>
 *
 * Protobuf type <code>google.api.servicecontrol.v1.Distribution.LinearBuckets</code>
 */
class Distribution_LinearBuckets extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * The number of finite buckets. With the underflow and overflow buckets,
     * the total number of buckets is `num_finite_buckets` + 2.
     * See comments on `bucket_options` for details.
     * </pre>
     *
     * <code>int32 num_finite_buckets = 1;</code>
     */
    private $num_finite_buckets = 0;
    /**
     * <pre>
     * The i'th linear bucket covers the interval
     *   [offset + (i-1) * width, offset + i * width)
     * where i ranges from 1 to num_finite_buckets, inclusive.
     * Must be strictly positive.
     * </pre>
     *
     * <code>double width = 2;</code>
     */
    private $width = 0.0;
    /**
     * <pre>
     * The i'th linear bucket covers the interval
     *   [offset + (i-1) * width, offset + i * width)
     * where i ranges from 1 to num_finite_buckets, inclusive.
     * </pre>
     *
     * <code>double offset = 3;</code>
     */
    private $offset = 0.0;

    public function __construct() {
        \GPBMetadata\Google\Api\Servicecontrol\V1\Distribution::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * The number of finite buckets. With the underflow and overflow buckets,
     * the total number of buckets is `num_finite_buckets` + 2.
     * See comments on `bucket_options` for details.
     * </pre>
     *
     * <code>int32 num_finite_buckets = 1;</code>
     */
    public function getNumFiniteBuckets()
    {
        return $this->num_finite_buckets;
    }

    /**
     * <pre>
     * The number of finite buckets. With the underflow and overflow buckets,
     * the total number of buckets is `num_finite_buckets` + 2.
     * See comments on `bucket_options` for details.
     * </pre>
     *
     * <code>int32 num_finite_buckets = 1;</code>
     */
    public function setNumFiniteBuckets($var)
    {
        GPBUtil::checkInt32($var);
        $this->num_finite_buckets = $var;
    }

    /**
     * <pre>
     * The i'th linear bucket covers the interval
     *   [offset + (i-1) * width, offset + i * width)
     * where i ranges from 1 to num_finite_buckets, inclusive.
     * Must be strictly positive.
     * </pre>
     *
     * <code>double width = 2;</code>
     */
    public function getWidth()
    {
        return $this->width;
    }

    /**
     * <pre>
     * The i'th linear bucket covers the interval
     *   [offset + (i-1) * width, offset + i * width)
     * where i ranges from 1 to num_finite_buckets, inclusive.
     * Must be strictly positive.
     * </pre>
     *
     * <code>double width = 2;</code>
     */
    public function setWidth($var)
    {
        GPBUtil::checkDouble($var);
        $this->width = $var;
    }

    /**
     * <pre>
     * The i'th linear bucket covers the interval
     *   [offset + (i-1) * width, offset + i * width)
     * where i ranges from 1 to num_finite_buckets, inclusive.
     * </pre>
     *
     * <code>double offset = 3;</code>
     */
    public function getOffset()
    {
        return $this->offset;
    }

    /**
     * <pre>
     * The i'th linear bucket covers the interval
     *   [offset + (i-1) * width, offset + i * width)
     * where i ranges from 1 to num_finite_buckets, inclusive.
     * </pre>
     *
     * <code>double offset = 3;</code>
     */
    public function setOffset($var)
    {
        GPBUtil::checkDouble($var);
        $this->offset = $var;
    }

}

