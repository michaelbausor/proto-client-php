<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/privacy/dlp/v2beta1/dlp.proto

namespace Google\Privacy\Dlp\V2beta1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Configuration description of the scanning process.
 * When used with redactContent only info_types and min_likelihood are currently
 * used.
 * </pre>
 *
 * Protobuf type <code>google.privacy.dlp.v2beta1.InspectConfig</code>
 */
class InspectConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Restrict what info_types to look for. The values must correspond to
     * InfoType values returned by ListInfoTypes or found in documentation.
     * Empty info_types runs all enabled detectors.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
     */
    private $info_types;
    /**
     * <pre>
     * Only return findings equal or above this threshold.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;</code>
     */
    private $min_likelihood = 0;
    /**
     * <pre>
     * Limit the number of findings per content item.
     * </pre>
     *
     * <code>int32 max_findings = 3;</code>
     */
    private $max_findings = 0;
    /**
     * <pre>
     * When true, a contextual quote from the data that triggered a finding will
     * be included in the response; see Finding.quote.
     * </pre>
     *
     * <code>bool include_quote = 4;</code>
     */
    private $include_quote = false;
    /**
     * <pre>
     * When true, exclude type information of the findings.
     * </pre>
     *
     * <code>bool exclude_types = 6;</code>
     */
    private $exclude_types = false;

    public function __construct() {
        \GPBMetadata\Google\Privacy\Dlp\V2Beta1\Dlp::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Restrict what info_types to look for. The values must correspond to
     * InfoType values returned by ListInfoTypes or found in documentation.
     * Empty info_types runs all enabled detectors.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
     */
    public function getInfoTypes()
    {
        return $this->info_types;
    }

    /**
     * <pre>
     * Restrict what info_types to look for. The values must correspond to
     * InfoType values returned by ListInfoTypes or found in documentation.
     * Empty info_types runs all enabled detectors.
     * </pre>
     *
     * <code>repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;</code>
     */
    public function setInfoTypes(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Privacy\Dlp\V2beta1\InfoType::class);
        $this->info_types = $var;
    }

    /**
     * <pre>
     * Only return findings equal or above this threshold.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;</code>
     */
    public function getMinLikelihood()
    {
        return $this->min_likelihood;
    }

    /**
     * <pre>
     * Only return findings equal or above this threshold.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;</code>
     */
    public function setMinLikelihood($var)
    {
        GPBUtil::checkEnum($var, \Google\Privacy\Dlp\V2beta1\Likelihood::class);
        $this->min_likelihood = $var;
    }

    /**
     * <pre>
     * Limit the number of findings per content item.
     * </pre>
     *
     * <code>int32 max_findings = 3;</code>
     */
    public function getMaxFindings()
    {
        return $this->max_findings;
    }

    /**
     * <pre>
     * Limit the number of findings per content item.
     * </pre>
     *
     * <code>int32 max_findings = 3;</code>
     */
    public function setMaxFindings($var)
    {
        GPBUtil::checkInt32($var);
        $this->max_findings = $var;
    }

    /**
     * <pre>
     * When true, a contextual quote from the data that triggered a finding will
     * be included in the response; see Finding.quote.
     * </pre>
     *
     * <code>bool include_quote = 4;</code>
     */
    public function getIncludeQuote()
    {
        return $this->include_quote;
    }

    /**
     * <pre>
     * When true, a contextual quote from the data that triggered a finding will
     * be included in the response; see Finding.quote.
     * </pre>
     *
     * <code>bool include_quote = 4;</code>
     */
    public function setIncludeQuote($var)
    {
        GPBUtil::checkBool($var);
        $this->include_quote = $var;
    }

    /**
     * <pre>
     * When true, exclude type information of the findings.
     * </pre>
     *
     * <code>bool exclude_types = 6;</code>
     */
    public function getExcludeTypes()
    {
        return $this->exclude_types;
    }

    /**
     * <pre>
     * When true, exclude type information of the findings.
     * </pre>
     *
     * <code>bool exclude_types = 6;</code>
     */
    public function setExcludeTypes($var)
    {
        GPBUtil::checkBool($var);
        $this->exclude_types = $var;
    }

}

