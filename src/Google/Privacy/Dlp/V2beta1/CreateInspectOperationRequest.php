<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/privacy/dlp/v2beta1/dlp.proto

namespace Google\Privacy\Dlp\V2beta1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Request for scheduling a scan of a data subset from a Google Platform data
 * repository.
 * </pre>
 *
 * Protobuf type <code>google.privacy.dlp.v2beta1.CreateInspectOperationRequest</code>
 */
class CreateInspectOperationRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Configuration for the inspector.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
     */
    private $inspect_config = null;
    /**
     * <pre>
     * Specification of the data set to process.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
     */
    private $storage_config = null;
    /**
     * <pre>
     * Optional location to store findings. The bucket must already exist and
     * the Google APIs service account for DLP must have write permission to
     * write to the given bucket.
     * Results will be split over multiple csv files with each file name matching
     * the pattern "[operation_id] + [count].csv".
     * The operation_id will match the identifier for the Operation,
     * and the [count] is a counter used for tracking the number of files written.
     * The CSV file(s) contain the following columns regardless of storage type
     * scanned: id, info_type, likelihood, byte size of finding, quote, time_stamp
     * For cloud storage the next two columns are: file_path, start_offset
     * For datastore the next two columns are: project_id, namespace_id, path,
     *     column_name, offset.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
     */
    private $output_config = null;

    public function __construct() {
        \GPBMetadata\Google\Privacy\Dlp\V2Beta1\Dlp::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Configuration for the inspector.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
     */
    public function getInspectConfig()
    {
        return $this->inspect_config;
    }

    /**
     * <pre>
     * Configuration for the inspector.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;</code>
     */
    public function setInspectConfig(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Privacy\Dlp\V2beta1\InspectConfig::class);
        $this->inspect_config = $var;
    }

    /**
     * <pre>
     * Specification of the data set to process.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
     */
    public function getStorageConfig()
    {
        return $this->storage_config;
    }

    /**
     * <pre>
     * Specification of the data set to process.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;</code>
     */
    public function setStorageConfig(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Privacy\Dlp\V2beta1\StorageConfig::class);
        $this->storage_config = $var;
    }

    /**
     * <pre>
     * Optional location to store findings. The bucket must already exist and
     * the Google APIs service account for DLP must have write permission to
     * write to the given bucket.
     * Results will be split over multiple csv files with each file name matching
     * the pattern "[operation_id] + [count].csv".
     * The operation_id will match the identifier for the Operation,
     * and the [count] is a counter used for tracking the number of files written.
     * The CSV file(s) contain the following columns regardless of storage type
     * scanned: id, info_type, likelihood, byte size of finding, quote, time_stamp
     * For cloud storage the next two columns are: file_path, start_offset
     * For datastore the next two columns are: project_id, namespace_id, path,
     *     column_name, offset.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
     */
    public function getOutputConfig()
    {
        return $this->output_config;
    }

    /**
     * <pre>
     * Optional location to store findings. The bucket must already exist and
     * the Google APIs service account for DLP must have write permission to
     * write to the given bucket.
     * Results will be split over multiple csv files with each file name matching
     * the pattern "[operation_id] + [count].csv".
     * The operation_id will match the identifier for the Operation,
     * and the [count] is a counter used for tracking the number of files written.
     * The CSV file(s) contain the following columns regardless of storage type
     * scanned: id, info_type, likelihood, byte size of finding, quote, time_stamp
     * For cloud storage the next two columns are: file_path, start_offset
     * For datastore the next two columns are: project_id, namespace_id, path,
     *     column_name, offset.
     * </pre>
     *
     * <code>.google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;</code>
     */
    public function setOutputConfig(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Privacy\Dlp\V2beta1\OutputStorageConfig::class);
        $this->output_config = $var;
    }

}

