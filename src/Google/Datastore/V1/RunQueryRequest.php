<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/datastore/v1/datastore.proto

namespace Google\Datastore\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * The request for [Datastore.RunQuery][google.datastore.v1.Datastore.RunQuery].
 * </pre>
 *
 * Protobuf type <code>google.datastore.v1.RunQueryRequest</code>
 */
class RunQueryRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * The ID of the project against which to make the request.
     * </pre>
     *
     * <code>string project_id = 8;</code>
     */
    private $project_id = '';
    /**
     * <pre>
     * Entities are partitioned into subsets, identified by a partition ID.
     * Queries are scoped to a single partition.
     * This partition ID is normalized with the standard default context
     * partition ID.
     * </pre>
     *
     * <code>.google.datastore.v1.PartitionId partition_id = 2;</code>
     */
    private $partition_id = null;
    /**
     * <pre>
     * The options for this query.
     * </pre>
     *
     * <code>.google.datastore.v1.ReadOptions read_options = 1;</code>
     */
    private $read_options = null;
    protected $query_type;

    public function __construct() {
        \GPBMetadata\Google\Datastore\V1\Datastore::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * The ID of the project against which to make the request.
     * </pre>
     *
     * <code>string project_id = 8;</code>
     */
    public function getProjectId()
    {
        return $this->project_id;
    }

    /**
     * <pre>
     * The ID of the project against which to make the request.
     * </pre>
     *
     * <code>string project_id = 8;</code>
     */
    public function setProjectId($var)
    {
        GPBUtil::checkString($var, True);
        $this->project_id = $var;
    }

    /**
     * <pre>
     * Entities are partitioned into subsets, identified by a partition ID.
     * Queries are scoped to a single partition.
     * This partition ID is normalized with the standard default context
     * partition ID.
     * </pre>
     *
     * <code>.google.datastore.v1.PartitionId partition_id = 2;</code>
     */
    public function getPartitionId()
    {
        return $this->partition_id;
    }

    /**
     * <pre>
     * Entities are partitioned into subsets, identified by a partition ID.
     * Queries are scoped to a single partition.
     * This partition ID is normalized with the standard default context
     * partition ID.
     * </pre>
     *
     * <code>.google.datastore.v1.PartitionId partition_id = 2;</code>
     */
    public function setPartitionId(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Datastore\V1\PartitionId::class);
        $this->partition_id = $var;
    }

    /**
     * <pre>
     * The options for this query.
     * </pre>
     *
     * <code>.google.datastore.v1.ReadOptions read_options = 1;</code>
     */
    public function getReadOptions()
    {
        return $this->read_options;
    }

    /**
     * <pre>
     * The options for this query.
     * </pre>
     *
     * <code>.google.datastore.v1.ReadOptions read_options = 1;</code>
     */
    public function setReadOptions(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Datastore\V1\ReadOptions::class);
        $this->read_options = $var;
    }

    /**
     * <pre>
     * The query to run.
     * </pre>
     *
     * <code>.google.datastore.v1.Query query = 3;</code>
     */
    public function getQuery()
    {
        return $this->readOneof(3);
    }

    /**
     * <pre>
     * The query to run.
     * </pre>
     *
     * <code>.google.datastore.v1.Query query = 3;</code>
     */
    public function setQuery(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Datastore\V1\Query::class);
        $this->writeOneof(3, $var);
    }

    /**
     * <pre>
     * The GQL query to run.
     * </pre>
     *
     * <code>.google.datastore.v1.GqlQuery gql_query = 7;</code>
     */
    public function getGqlQuery()
    {
        return $this->readOneof(7);
    }

    /**
     * <pre>
     * The GQL query to run.
     * </pre>
     *
     * <code>.google.datastore.v1.GqlQuery gql_query = 7;</code>
     */
    public function setGqlQuery(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Datastore\V1\GqlQuery::class);
        $this->writeOneof(7, $var);
    }

    public function getQueryType()
    {
        return $this->whichOneof("query_type");
    }

}

