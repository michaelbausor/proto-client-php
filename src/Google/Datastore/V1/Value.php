<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/datastore/v1/entity.proto

namespace Google\Datastore\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * A message that can hold any of the supported value types and associated
 * metadata.
 * </pre>
 *
 * Protobuf type <code>google.datastore.v1.Value</code>
 */
class Value extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * The `meaning` field should only be populated for backwards compatibility.
     * </pre>
     *
     * <code>int32 meaning = 14;</code>
     */
    private $meaning = 0;
    /**
     * <pre>
     * If the value should be excluded from all indexes including those defined
     * explicitly.
     * </pre>
     *
     * <code>bool exclude_from_indexes = 19;</code>
     */
    private $exclude_from_indexes = false;
    protected $value_type;

    public function __construct() {
        \GPBMetadata\Google\Datastore\V1\Entity::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * A null value.
     * </pre>
     *
     * <code>.google.protobuf.NullValue null_value = 11;</code>
     */
    public function getNullValue()
    {
        return $this->readOneof(11);
    }

    /**
     * <pre>
     * A null value.
     * </pre>
     *
     * <code>.google.protobuf.NullValue null_value = 11;</code>
     */
    public function setNullValue($var)
    {
        GPBUtil::checkEnum($var, \Google\Protobuf\NullValue::class);
        $this->writeOneof(11, $var);
    }

    /**
     * <pre>
     * A boolean value.
     * </pre>
     *
     * <code>bool boolean_value = 1;</code>
     */
    public function getBooleanValue()
    {
        return $this->readOneof(1);
    }

    /**
     * <pre>
     * A boolean value.
     * </pre>
     *
     * <code>bool boolean_value = 1;</code>
     */
    public function setBooleanValue($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(1, $var);
    }

    /**
     * <pre>
     * An integer value.
     * </pre>
     *
     * <code>int64 integer_value = 2;</code>
     */
    public function getIntegerValue()
    {
        return $this->readOneof(2);
    }

    /**
     * <pre>
     * An integer value.
     * </pre>
     *
     * <code>int64 integer_value = 2;</code>
     */
    public function setIntegerValue($var)
    {
        GPBUtil::checkInt64($var);
        $this->writeOneof(2, $var);
    }

    /**
     * <pre>
     * A double value.
     * </pre>
     *
     * <code>double double_value = 3;</code>
     */
    public function getDoubleValue()
    {
        return $this->readOneof(3);
    }

    /**
     * <pre>
     * A double value.
     * </pre>
     *
     * <code>double double_value = 3;</code>
     */
    public function setDoubleValue($var)
    {
        GPBUtil::checkDouble($var);
        $this->writeOneof(3, $var);
    }

    /**
     * <pre>
     * A timestamp value.
     * When stored in the Datastore, precise only to microseconds;
     * any additional precision is rounded down.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp timestamp_value = 10;</code>
     */
    public function getTimestampValue()
    {
        return $this->readOneof(10);
    }

    /**
     * <pre>
     * A timestamp value.
     * When stored in the Datastore, precise only to microseconds;
     * any additional precision is rounded down.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp timestamp_value = 10;</code>
     */
    public function setTimestampValue(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->writeOneof(10, $var);
    }

    /**
     * <pre>
     * A key value.
     * </pre>
     *
     * <code>.google.datastore.v1.Key key_value = 5;</code>
     */
    public function getKeyValue()
    {
        return $this->readOneof(5);
    }

    /**
     * <pre>
     * A key value.
     * </pre>
     *
     * <code>.google.datastore.v1.Key key_value = 5;</code>
     */
    public function setKeyValue(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Datastore\V1\Key::class);
        $this->writeOneof(5, $var);
    }

    /**
     * <pre>
     * A UTF-8 encoded string value.
     * When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes.
     * Otherwise, may be set to at least 1,000,000 bytes.
     * </pre>
     *
     * <code>string string_value = 17;</code>
     */
    public function getStringValue()
    {
        return $this->readOneof(17);
    }

    /**
     * <pre>
     * A UTF-8 encoded string value.
     * When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes.
     * Otherwise, may be set to at least 1,000,000 bytes.
     * </pre>
     *
     * <code>string string_value = 17;</code>
     */
    public function setStringValue($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(17, $var);
    }

    /**
     * <pre>
     * A blob value.
     * May have at most 1,000,000 bytes.
     * When `exclude_from_indexes` is false, may have at most 1500 bytes.
     * In JSON requests, must be base64-encoded.
     * </pre>
     *
     * <code>bytes blob_value = 18;</code>
     */
    public function getBlobValue()
    {
        return $this->readOneof(18);
    }

    /**
     * <pre>
     * A blob value.
     * May have at most 1,000,000 bytes.
     * When `exclude_from_indexes` is false, may have at most 1500 bytes.
     * In JSON requests, must be base64-encoded.
     * </pre>
     *
     * <code>bytes blob_value = 18;</code>
     */
    public function setBlobValue($var)
    {
        GPBUtil::checkString($var, False);
        $this->writeOneof(18, $var);
    }

    /**
     * <pre>
     * A geo point value representing a point on the surface of Earth.
     * </pre>
     *
     * <code>.google.type.LatLng geo_point_value = 8;</code>
     */
    public function getGeoPointValue()
    {
        return $this->readOneof(8);
    }

    /**
     * <pre>
     * A geo point value representing a point on the surface of Earth.
     * </pre>
     *
     * <code>.google.type.LatLng geo_point_value = 8;</code>
     */
    public function setGeoPointValue(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Type\LatLng::class);
        $this->writeOneof(8, $var);
    }

    /**
     * <pre>
     * An entity value.
     * - May have no key.
     * - May have a key with an incomplete key path.
     * - May have a reserved/read-only key.
     * </pre>
     *
     * <code>.google.datastore.v1.Entity entity_value = 6;</code>
     */
    public function getEntityValue()
    {
        return $this->readOneof(6);
    }

    /**
     * <pre>
     * An entity value.
     * - May have no key.
     * - May have a key with an incomplete key path.
     * - May have a reserved/read-only key.
     * </pre>
     *
     * <code>.google.datastore.v1.Entity entity_value = 6;</code>
     */
    public function setEntityValue(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Datastore\V1\Entity::class);
        $this->writeOneof(6, $var);
    }

    /**
     * <pre>
     * An array value.
     * Cannot contain another array value.
     * A `Value` instance that sets field `array_value` must not set fields
     * `meaning` or `exclude_from_indexes`.
     * </pre>
     *
     * <code>.google.datastore.v1.ArrayValue array_value = 9;</code>
     */
    public function getArrayValue()
    {
        return $this->readOneof(9);
    }

    /**
     * <pre>
     * An array value.
     * Cannot contain another array value.
     * A `Value` instance that sets field `array_value` must not set fields
     * `meaning` or `exclude_from_indexes`.
     * </pre>
     *
     * <code>.google.datastore.v1.ArrayValue array_value = 9;</code>
     */
    public function setArrayValue(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Datastore\V1\ArrayValue::class);
        $this->writeOneof(9, $var);
    }

    /**
     * <pre>
     * The `meaning` field should only be populated for backwards compatibility.
     * </pre>
     *
     * <code>int32 meaning = 14;</code>
     */
    public function getMeaning()
    {
        return $this->meaning;
    }

    /**
     * <pre>
     * The `meaning` field should only be populated for backwards compatibility.
     * </pre>
     *
     * <code>int32 meaning = 14;</code>
     */
    public function setMeaning($var)
    {
        GPBUtil::checkInt32($var);
        $this->meaning = $var;
    }

    /**
     * <pre>
     * If the value should be excluded from all indexes including those defined
     * explicitly.
     * </pre>
     *
     * <code>bool exclude_from_indexes = 19;</code>
     */
    public function getExcludeFromIndexes()
    {
        return $this->exclude_from_indexes;
    }

    /**
     * <pre>
     * If the value should be excluded from all indexes including those defined
     * explicitly.
     * </pre>
     *
     * <code>bool exclude_from_indexes = 19;</code>
     */
    public function setExcludeFromIndexes($var)
    {
        GPBUtil::checkBool($var);
        $this->exclude_from_indexes = $var;
    }

    public function getValueType()
    {
        return $this->whichOneof("value_type");
    }

}

