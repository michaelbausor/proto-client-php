<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/datastore/v1/datastore.proto

namespace Google\Datastore\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * A mutation to apply to an entity.
 * </pre>
 *
 * Protobuf type <code>google.datastore.v1.Mutation</code>
 */
class Mutation extends \Google\Protobuf\Internal\Message
{
    protected $operation;
    protected $conflict_detection_strategy;

    public function __construct() {
        \GPBMetadata\Google\Datastore\V1\Datastore::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * The entity to insert. The entity must not already exist.
     * The entity key's final path element may be incomplete.
     * </pre>
     *
     * <code>.google.datastore.v1.Entity insert = 4;</code>
     */
    public function getInsert()
    {
        return $this->readOneof(4);
    }

    /**
     * <pre>
     * The entity to insert. The entity must not already exist.
     * The entity key's final path element may be incomplete.
     * </pre>
     *
     * <code>.google.datastore.v1.Entity insert = 4;</code>
     */
    public function setInsert(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Datastore\V1\Entity::class);
        $this->writeOneof(4, $var);
    }

    /**
     * <pre>
     * The entity to update. The entity must already exist.
     * Must have a complete key path.
     * </pre>
     *
     * <code>.google.datastore.v1.Entity update = 5;</code>
     */
    public function getUpdate()
    {
        return $this->readOneof(5);
    }

    /**
     * <pre>
     * The entity to update. The entity must already exist.
     * Must have a complete key path.
     * </pre>
     *
     * <code>.google.datastore.v1.Entity update = 5;</code>
     */
    public function setUpdate(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Datastore\V1\Entity::class);
        $this->writeOneof(5, $var);
    }

    /**
     * <pre>
     * The entity to upsert. The entity may or may not already exist.
     * The entity key's final path element may be incomplete.
     * </pre>
     *
     * <code>.google.datastore.v1.Entity upsert = 6;</code>
     */
    public function getUpsert()
    {
        return $this->readOneof(6);
    }

    /**
     * <pre>
     * The entity to upsert. The entity may or may not already exist.
     * The entity key's final path element may be incomplete.
     * </pre>
     *
     * <code>.google.datastore.v1.Entity upsert = 6;</code>
     */
    public function setUpsert(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Datastore\V1\Entity::class);
        $this->writeOneof(6, $var);
    }

    /**
     * <pre>
     * The key of the entity to delete. The entity may or may not already exist.
     * Must have a complete key path and must not be reserved/read-only.
     * </pre>
     *
     * <code>.google.datastore.v1.Key delete = 7;</code>
     */
    public function getDelete()
    {
        return $this->readOneof(7);
    }

    /**
     * <pre>
     * The key of the entity to delete. The entity may or may not already exist.
     * Must have a complete key path and must not be reserved/read-only.
     * </pre>
     *
     * <code>.google.datastore.v1.Key delete = 7;</code>
     */
    public function setDelete(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Datastore\V1\Key::class);
        $this->writeOneof(7, $var);
    }

    /**
     * <pre>
     * The version of the entity that this mutation is being applied to. If this
     * does not match the current version on the server, the mutation conflicts.
     * </pre>
     *
     * <code>int64 base_version = 8;</code>
     */
    public function getBaseVersion()
    {
        return $this->readOneof(8);
    }

    /**
     * <pre>
     * The version of the entity that this mutation is being applied to. If this
     * does not match the current version on the server, the mutation conflicts.
     * </pre>
     *
     * <code>int64 base_version = 8;</code>
     */
    public function setBaseVersion($var)
    {
        GPBUtil::checkInt64($var);
        $this->writeOneof(8, $var);
    }

    public function getOperation()
    {
        return $this->whichOneof("operation");
    }

    public function getConflictDetectionStrategy()
    {
        return $this->whichOneof("conflict_detection_strategy");
    }

}

