<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/spanner/v1/mutation.proto

namespace Google\Spanner\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * A modification to one or more Cloud Spanner rows.  Mutations can be
 * applied to a Cloud Spanner database by sending them in a
 * [Commit][google.spanner.v1.Spanner.Commit] call.
 * </pre>
 *
 * Protobuf type <code>google.spanner.v1.Mutation</code>
 */
class Mutation extends \Google\Protobuf\Internal\Message
{
    protected $operation;

    public function __construct() {
        \GPBMetadata\Google\Spanner\V1\Mutation::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Insert new rows in a table. If any of the rows already exist,
     * the write or transaction fails with error `ALREADY_EXISTS`.
     * </pre>
     *
     * <code>.google.spanner.v1.Mutation.Write insert = 1;</code>
     */
    public function getInsert()
    {
        return $this->readOneof(1);
    }

    /**
     * <pre>
     * Insert new rows in a table. If any of the rows already exist,
     * the write or transaction fails with error `ALREADY_EXISTS`.
     * </pre>
     *
     * <code>.google.spanner.v1.Mutation.Write insert = 1;</code>
     */
    public function setInsert(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Spanner\V1\Mutation_Write::class);
        $this->writeOneof(1, $var);
    }

    /**
     * <pre>
     * Update existing rows in a table. If any of the rows does not
     * already exist, the transaction fails with error `NOT_FOUND`.
     * </pre>
     *
     * <code>.google.spanner.v1.Mutation.Write update = 2;</code>
     */
    public function getUpdate()
    {
        return $this->readOneof(2);
    }

    /**
     * <pre>
     * Update existing rows in a table. If any of the rows does not
     * already exist, the transaction fails with error `NOT_FOUND`.
     * </pre>
     *
     * <code>.google.spanner.v1.Mutation.Write update = 2;</code>
     */
    public function setUpdate(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Spanner\V1\Mutation_Write::class);
        $this->writeOneof(2, $var);
    }

    /**
     * <pre>
     * Like [insert][google.spanner.v1.Mutation.insert], except that if the row already exists, then
     * its column values are overwritten with the ones provided. Any
     * column values not explicitly written are preserved.
     * </pre>
     *
     * <code>.google.spanner.v1.Mutation.Write insert_or_update = 3;</code>
     */
    public function getInsertOrUpdate()
    {
        return $this->readOneof(3);
    }

    /**
     * <pre>
     * Like [insert][google.spanner.v1.Mutation.insert], except that if the row already exists, then
     * its column values are overwritten with the ones provided. Any
     * column values not explicitly written are preserved.
     * </pre>
     *
     * <code>.google.spanner.v1.Mutation.Write insert_or_update = 3;</code>
     */
    public function setInsertOrUpdate(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Spanner\V1\Mutation_Write::class);
        $this->writeOneof(3, $var);
    }

    /**
     * <pre>
     * Like [insert][google.spanner.v1.Mutation.insert], except that if the row already exists, it is
     * deleted, and the column values provided are inserted
     * instead. Unlike [insert_or_update][google.spanner.v1.Mutation.insert_or_update], this means any values not
     * explicitly written become `NULL`.
     * </pre>
     *
     * <code>.google.spanner.v1.Mutation.Write replace = 4;</code>
     */
    public function getReplace()
    {
        return $this->readOneof(4);
    }

    /**
     * <pre>
     * Like [insert][google.spanner.v1.Mutation.insert], except that if the row already exists, it is
     * deleted, and the column values provided are inserted
     * instead. Unlike [insert_or_update][google.spanner.v1.Mutation.insert_or_update], this means any values not
     * explicitly written become `NULL`.
     * </pre>
     *
     * <code>.google.spanner.v1.Mutation.Write replace = 4;</code>
     */
    public function setReplace(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Spanner\V1\Mutation_Write::class);
        $this->writeOneof(4, $var);
    }

    /**
     * <pre>
     * Delete rows from a table. Succeeds whether or not the named
     * rows were present.
     * </pre>
     *
     * <code>.google.spanner.v1.Mutation.Delete delete = 5;</code>
     */
    public function getDelete()
    {
        return $this->readOneof(5);
    }

    /**
     * <pre>
     * Delete rows from a table. Succeeds whether or not the named
     * rows were present.
     * </pre>
     *
     * <code>.google.spanner.v1.Mutation.Delete delete = 5;</code>
     */
    public function setDelete(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Spanner\V1\Mutation_Delete::class);
        $this->writeOneof(5, $var);
    }

    public function getOperation()
    {
        return $this->whichOneof("operation");
    }

}

