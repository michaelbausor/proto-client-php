<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/spanner/v1/spanner.proto

namespace Google\Spanner\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * The request for [Commit][google.spanner.v1.Spanner.Commit].
 * </pre>
 *
 * Protobuf type <code>google.spanner.v1.CommitRequest</code>
 */
class CommitRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Required. The session in which the transaction to be committed is running.
     * </pre>
     *
     * <code>string session = 1;</code>
     */
    private $session = '';
    /**
     * <pre>
     * The mutations to be executed when this transaction commits. All
     * mutations are applied atomically, in the order they appear in
     * this list.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
     */
    private $mutations;
    protected $transaction;

    public function __construct() {
        \GPBMetadata\Google\Spanner\V1\Spanner::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Required. The session in which the transaction to be committed is running.
     * </pre>
     *
     * <code>string session = 1;</code>
     */
    public function getSession()
    {
        return $this->session;
    }

    /**
     * <pre>
     * Required. The session in which the transaction to be committed is running.
     * </pre>
     *
     * <code>string session = 1;</code>
     */
    public function setSession($var)
    {
        GPBUtil::checkString($var, True);
        $this->session = $var;
    }

    /**
     * <pre>
     * Commit a previously-started transaction.
     * </pre>
     *
     * <code>bytes transaction_id = 2;</code>
     */
    public function getTransactionId()
    {
        return $this->readOneof(2);
    }

    /**
     * <pre>
     * Commit a previously-started transaction.
     * </pre>
     *
     * <code>bytes transaction_id = 2;</code>
     */
    public function setTransactionId($var)
    {
        GPBUtil::checkString($var, False);
        $this->writeOneof(2, $var);
    }

    /**
     * <pre>
     * Execute mutations in a temporary transaction. Note that unlike
     * commit of a previously-started transaction, commit with a
     * temporary transaction is non-idempotent. That is, if the
     * `CommitRequest` is sent to Cloud Spanner more than once (for
     * instance, due to retries in the application, or in the
     * transport library), it is possible that the mutations are
     * executed more than once. If this is undesirable, use
     * [BeginTransaction][google.spanner.v1.Spanner.BeginTransaction] and
     * [Commit][google.spanner.v1.Spanner.Commit] instead.
     * </pre>
     *
     * <code>.google.spanner.v1.TransactionOptions single_use_transaction = 3;</code>
     */
    public function getSingleUseTransaction()
    {
        return $this->readOneof(3);
    }

    /**
     * <pre>
     * Execute mutations in a temporary transaction. Note that unlike
     * commit of a previously-started transaction, commit with a
     * temporary transaction is non-idempotent. That is, if the
     * `CommitRequest` is sent to Cloud Spanner more than once (for
     * instance, due to retries in the application, or in the
     * transport library), it is possible that the mutations are
     * executed more than once. If this is undesirable, use
     * [BeginTransaction][google.spanner.v1.Spanner.BeginTransaction] and
     * [Commit][google.spanner.v1.Spanner.Commit] instead.
     * </pre>
     *
     * <code>.google.spanner.v1.TransactionOptions single_use_transaction = 3;</code>
     */
    public function setSingleUseTransaction(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Spanner\V1\TransactionOptions::class);
        $this->writeOneof(3, $var);
    }

    /**
     * <pre>
     * The mutations to be executed when this transaction commits. All
     * mutations are applied atomically, in the order they appear in
     * this list.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
     */
    public function getMutations()
    {
        return $this->mutations;
    }

    /**
     * <pre>
     * The mutations to be executed when this transaction commits. All
     * mutations are applied atomically, in the order they appear in
     * this list.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.Mutation mutations = 4;</code>
     */
    public function setMutations(&$var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Spanner\V1\Mutation::class);
        $this->mutations = $arr;
    }

    public function getTransaction()
    {
        return $this->whichOneof("transaction");
    }

}

