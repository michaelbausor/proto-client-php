<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/language/v1beta2/language_service.proto

namespace Google\Cloud\Language\V1beta2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * ################################################################ #
 * Represents the input to API methods.
 * </pre>
 *
 * Protobuf type <code>google.cloud.language.v1beta2.Document</code>
 */
class Document extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Required. If the type is not set or is `TYPE_UNSPECIFIED`,
     * returns an `INVALID_ARGUMENT` error.
     * </pre>
     *
     * <code>.google.cloud.language.v1beta2.Document.Type type = 1;</code>
     */
    private $type = 0;
    /**
     * <pre>
     * The language of the document (if not specified, the language is
     * automatically detected). Both ISO and BCP-47 language codes are
     * accepted.&lt;br&gt;
     * [Language Support](https://cloud.google.com/natural-language/docs/languages)
     * lists currently supported languages for each API method.
     * If the language (either specified by the caller or automatically detected)
     * is not supported by the called API method, an `INVALID_ARGUMENT` error
     * is returned.
     * </pre>
     *
     * <code>string language = 4;</code>
     */
    private $language = '';
    protected $source;

    public function __construct() {
        \GPBMetadata\Google\Cloud\Language\V1Beta2\LanguageService::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Required. If the type is not set or is `TYPE_UNSPECIFIED`,
     * returns an `INVALID_ARGUMENT` error.
     * </pre>
     *
     * <code>.google.cloud.language.v1beta2.Document.Type type = 1;</code>
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * <pre>
     * Required. If the type is not set or is `TYPE_UNSPECIFIED`,
     * returns an `INVALID_ARGUMENT` error.
     * </pre>
     *
     * <code>.google.cloud.language.v1beta2.Document.Type type = 1;</code>
     */
    public function setType($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\Language\V1beta2\Document_Type::class);
        $this->type = $var;
    }

    /**
     * <pre>
     * The content of the input in string format.
     * </pre>
     *
     * <code>string content = 2;</code>
     */
    public function getContent()
    {
        return $this->readOneof(2);
    }

    /**
     * <pre>
     * The content of the input in string format.
     * </pre>
     *
     * <code>string content = 2;</code>
     */
    public function setContent($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(2, $var);
    }

    /**
     * <pre>
     * The Google Cloud Storage URI where the file content is located.
     * This URI must be of the form: gs://bucket_name/object_name. For more
     * details, see https://cloud.google.com/storage/docs/reference-uris.
     * NOTE: Cloud Storage object versioning is not supported.
     * </pre>
     *
     * <code>string gcs_content_uri = 3;</code>
     */
    public function getGcsContentUri()
    {
        return $this->readOneof(3);
    }

    /**
     * <pre>
     * The Google Cloud Storage URI where the file content is located.
     * This URI must be of the form: gs://bucket_name/object_name. For more
     * details, see https://cloud.google.com/storage/docs/reference-uris.
     * NOTE: Cloud Storage object versioning is not supported.
     * </pre>
     *
     * <code>string gcs_content_uri = 3;</code>
     */
    public function setGcsContentUri($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(3, $var);
    }

    /**
     * <pre>
     * The language of the document (if not specified, the language is
     * automatically detected). Both ISO and BCP-47 language codes are
     * accepted.&lt;br&gt;
     * [Language Support](https://cloud.google.com/natural-language/docs/languages)
     * lists currently supported languages for each API method.
     * If the language (either specified by the caller or automatically detected)
     * is not supported by the called API method, an `INVALID_ARGUMENT` error
     * is returned.
     * </pre>
     *
     * <code>string language = 4;</code>
     */
    public function getLanguage()
    {
        return $this->language;
    }

    /**
     * <pre>
     * The language of the document (if not specified, the language is
     * automatically detected). Both ISO and BCP-47 language codes are
     * accepted.&lt;br&gt;
     * [Language Support](https://cloud.google.com/natural-language/docs/languages)
     * lists currently supported languages for each API method.
     * If the language (either specified by the caller or automatically detected)
     * is not supported by the called API method, an `INVALID_ARGUMENT` error
     * is returned.
     * </pre>
     *
     * <code>string language = 4;</code>
     */
    public function setLanguage($var)
    {
        GPBUtil::checkString($var, True);
        $this->language = $var;
    }

    public function getSource()
    {
        return $this->whichOneof("source");
    }

}

